version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: kmrl-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-kmrl_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-kmrl_password}
      POSTGRES_DB: ${POSTGRES_DB:-kmrl_train_db}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/backup:/backup
    networks:
      - kmrl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kmrl_user} -d ${POSTGRES_DB:-kmrl_train_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: kmrl-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --timeout 300
      --tcp-keepalive 60
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - kmrl-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend Node.js API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: kmrl-backend
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://kmrl_user:kmrl_password@postgres:5432/kmrl_train_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your_jwt_secret_key_here
      REFRESH_TOKEN_SECRET: your_refresh_secret_key_here
      AI_SERVICE_URL: http://ai-service:8001
      FRONTEND_URL: http://localhost:3000
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - kmrl-network
    command: sh -c "npx prisma migrate deploy && npm run dev"

  # AI/ML Python Service
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: kmrl-ai-service
    ports:
      - "8001:8001"
    environment:
      DATABASE_URL: postgresql://kmrl_user:kmrl_password@postgres:5432/kmrl_train_db
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis
    volumes:
      - ./ai-service:/app
    networks:
      - kmrl-network

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: kmrl-frontend
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_WS_URL: http://localhost:3001
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - kmrl-network
    command: npm start

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: kmrl-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - kmrl-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  kmrl-network:
    driver: bridge
